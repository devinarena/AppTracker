{"version":3,"sources":["Application.js","ApplicationContext.js","components/Navbar.js","components/application-manage/AddApplication.js","components/application-manage/ApplicationStats.js","components/application-manage/ApplicationManager.js","components/application-view/ApplicationCard.js","components/application-view/ApplicationView.js","components/application-view/ApplicationPopup.js","components/DialogBox.js","AppTracker.js","index.js"],"names":["Application","id","company","notes","date","interviews","offer","rejection","this","AppsContext","React","createContext","theme","apps","removeApp","addApp","updateApp","showPopup","showDialog","createdApps","Navbar","props","menuRef","createRef","inputRef","appsContext","useContext","className","onMouseEnter","current","style","visibility","opacity","onMouseLeave","ref","type","accept","name","onChange","file","files","fr","FileReader","readAsText","onload","loadFromJSON","JSON","parse","result","value","loadFile","onTransitionEnd","e","target","hideMenu","onClick","document","documentElement","getPropertyValue","switchTheme","href","json","encodeURIComponent","stringify","download","click","AddApplication","useState","setCompany","setNotes","handleSubmit","preventDefault","submitApp","length","Date","toLocaleDateString","app","Consumer","onSubmit","maxLength","rows","ApplicationStats","ApplicationContext","offers","rejections","pullStats","ApplicationManager","ApplicationCard","ApplicationView","map","ApplicationPopup","setDate","setInterviews","closing","setClosing","popup","useEffect","application","dates","split","padStart","close","formatDate","charAt","parseInt","DialogBox","hidden","setHidden","reset","setReset","oldText","setOldText","timer","useRef","textChange","text","clearTimeout","setTimeout","propertyName","fadedOut","AppTracker","setTheme","setApps","setCreatedApps","popupApplication","setPopupApplication","dialogText","setDialogText","localStorage","getItem","setItem","setProperty","Provider","filter","concat","values","numApps","Math","max","i","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0b00f193.chunk.js","sourcesContent":["\r\n/**\r\n * @file Application.js\r\n * @author Devin Arena\r\n * @description Data store class for application info\r\n * @since 8/29/2021\r\n */\r\n\r\nexport default class Application {\r\n    /**\r\n     * Default constructor for Applications, all info must be entered.\r\n     * \r\n     * @param {int} id the application id to keep it unique\r\n     * @param {String} company the company or position name\r\n     * @param {String} notes any user notes about the company\r\n     * @param {String} date the date the application was submitted\r\n     * @param {int} interviews the number of interviews had for this position\r\n     * @param {boolean} offer if an offer has been given\r\n     * @param {boolean} rejection if a rejection has been given\r\n     */\r\n    constructor(id, company, notes, date, interviews, offer, rejection) {\r\n        this.id = id;\r\n        this.company = company;\r\n        this.notes = notes;\r\n        this.date = date;\r\n        this.interviews = interviews;\r\n        this.offer = offer;\r\n        this.rejection = rejection;\r\n    }\r\n}","import React from 'react'\r\n\r\nconst AppsContext = React.createContext({\r\n    theme: \"light\",\r\n    apps: [],\r\n    removeApp: () => { },\r\n    addApp: () => { },\r\n    updateApp: () => { },\r\n    showPopup: () => { },\r\n    showDialog: () => { },\r\n    createdApps: 0,\r\n});\r\n\r\nexport default AppsContext;","import './Navbar.css'\r\nimport React, { useContext } from 'react'\r\nimport AppsContext from '../ApplicationContext';\r\n\r\n/**\r\n * @file Navbar.js\r\n * @author Devin Arena\r\n * @description Generates a stateful navbar using JSX for the header\r\n * @since 8/27/2021\r\n */\r\n\r\n/**\r\n * Builds the Navbar for application, containing a dropdown\r\n * menu with a list of operations for the user.\r\n * \r\n * @param props must contain theme data, loadFromJSON callback and switchTheme callback\r\n * \r\n * @returns JSX for a navbar element\r\n */\r\nconst Navbar = (props) => {\r\n\r\n    // So I can keep track of the menu from DOM to remove it when opacity is 0\r\n    const menuRef = React.createRef();\r\n    const inputRef = React.createRef();\r\n\r\n    const appsContext = useContext(AppsContext);\r\n\r\n    /**\r\n     * Fades the dropdown menu in and makes it visible to the user\r\n     * \r\n     * @returns void\r\n     */\r\n    const fadeMenuIn = () => {\r\n        menuRef.current.style.visibility = \"visible\";\r\n        menuRef.current.style.opacity = 1;\r\n    }\r\n\r\n    /**\r\n     * Fades the dropdown menu out\r\n     * \r\n     * @returns void\r\n     */\r\n    const fadeMenuOut = () => {\r\n        menuRef.current.style.opacity = 0;\r\n    }\r\n\r\n    /**\r\n     * When the menu finishes fading out, hide it.\r\n     * \r\n     * @returns void\r\n     */\r\n    const hideMenu = (e) => {\r\n        if (e.target === menuRef.current) {\r\n            if (menuRef.current.style.opacity === \"0\") {\r\n                menuRef.current.style.visibility = \"hidden\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a download URL based on currently saved settings and applications.\r\n     * \r\n     * @returns {String} a download URL for the settings file\r\n     */\r\n    const download = () => {\r\n        const json = {\r\n            \"theme\": appsContext.theme,\r\n            \"createdApps\": appsContext.createdApps,\r\n            \"apps\": appsContext.apps\r\n        }\r\n        return \"data:text/plain;charset=utf-8,\" + encodeURIComponent(JSON.stringify(json));\r\n    }\r\n\r\n    /**\r\n     * Loads a file, parses it, and passes the JSON back\r\n     * to AppTracker to handle adding loaded apps.\r\n     */\r\n    const loadFile = () => {\r\n        const file = inputRef.current.files[0];\r\n        const fr = new FileReader();\r\n        fr.readAsText(file);\r\n        fr.onload = () => {\r\n            props.loadFromJSON(JSON.parse(fr.result));\r\n        }\r\n        inputRef.current.value = null;\r\n    }\r\n\r\n    return (<div className=\"navbar\">\r\n        <h1>AppTracker</h1>\r\n        <div className=\"dropdown\" onMouseEnter={fadeMenuIn} onMouseLeave={fadeMenuOut}>\r\n            <input ref={inputRef} type=\"file\" accept=\".json\" name=\"filePicker\" onChange={() => loadFile()} />\r\n            <h1>Menu</h1>\r\n            <ul className=\"menu\" style={{ opacity: 0 }} ref={menuRef} onTransitionEnd={e => hideMenu(e)}>\r\n                <li><button type=\"button\" onClick={() => {\r\n                    if (document.documentElement.style.getPropertyValue(\"--animated\") !== \"all\") {\r\n                        props.switchTheme();\r\n                        appsContext.showDialog(\"Theme has been switched\");\r\n                    }\r\n                }\r\n                }> Theme: {props.theme === \"dark\" ? \"🌙\" : \"🌞\"}</button></li>\r\n                <li><a href={download()} download=\"apps.json\">Export Data</a></li>\r\n                <li><button type=\"button\" onClick={() => inputRef.current.click()}>Import Data</button></li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import { useContext, useState } from 'react';\r\nimport AppsContext from '../../ApplicationContext'\r\nimport Application from '../../Application';\r\nimport './AddApplication.css'\r\n\r\n/**\r\n * @file AddApplication\r\n * @author Devin Arena\r\n * @description Extracted component for adding an application\r\n *              using a text field, textarea and submit button\r\n * @since 8/31/2021\r\n */\r\n\r\n/**\r\n * Builds the AddApplication panel which allows\r\n * you to enter company, notes, and submit\r\n * \r\n * @returns JSX for ApplicationStats\r\n */\r\nconst AddApplication = () => {\r\n\r\n    const [company, setCompany] = useState(\"\");\r\n    const [notes, setNotes] = useState(\"\");\r\n\r\n    const appsContext = useContext(AppsContext);\r\n\r\n    /**\r\n     * When the form is submitted, add a \r\n     * new application using the entered information.\r\n     * \r\n     * @param {Event} e to prevent default \r\n     */\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        submitApp();\r\n    }\r\n\r\n    /**\r\n     * Submits an application, adding it to the list of apps.\r\n     * \r\n     * @returns {Application} app the submitted application \r\n     */\r\n    const submitApp = () => {\r\n        if (company.length === 0)\r\n            return;\r\n        let date = new Date().toLocaleDateString();\r\n        let interviews = 0;\r\n        let offer = false;\r\n        let rejection = false;\r\n        let app = new Application(appsContext.createdApps, company, notes, date, interviews, offer, rejection);\r\n        appsContext.addApp(app);\r\n        appsContext.showDialog(\"Successfully added application for \" + company);\r\n        setCompany(\"\");\r\n        setNotes(\"\");\r\n        return app;\r\n    }\r\n\r\n    return (\r\n        <AppsContext.Consumer>\r\n            {({ showPopup }) => {\r\n                return (\r\n                    <div className=\"add-application\">\r\n                        <form onSubmit={handleSubmit}>\r\n                            <label>\r\n                                Company/Position:\r\n                            </label>\r\n                            <input type=\"text\" name=\"company\" value={company} maxLength=\"80\" onChange={e => setCompany(e.target.value)} />\r\n                            <label>\r\n                                Notes:\r\n                            </label>\r\n                            <textarea name=\"notes\" rows=\"3\" maxLength=\"2000\" value={notes} onChange={e => setNotes(e.target.value)} />\r\n                            <input type=\"submit\" value=\"Add Application\" />\r\n                            <button name=\"advanced\" onClick={() => {\r\n                                showPopup(submitApp());\r\n                            }}>Add Advanced</button>\r\n                        </form>\r\n                    </div>\r\n                );\r\n            }}\r\n        </AppsContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default AddApplication;","import ApplicationContext from '../../ApplicationContext'\r\nimport './ApplicationStats.css'\r\n\r\n/**\r\n * @file ApplicationStats.js\r\n * @author Devin Arena\r\n * @description Displays the users total applications, interviews, rejections\r\n *              response rate, etc.\r\n * @since 8/31/2021\r\n */\r\n\r\n/**\r\n * Builds the ApplicationManager widget containing\r\n * widgets for application management\r\n * \r\n * @returns JSX for ApplicationStats\r\n */\r\nconst ApplicationStats = () => {\r\n\r\n    const pullStats = (apps) => {\r\n        let interviews = 0;\r\n        let offers = 0;\r\n        let rejections = 0;\r\n        for (const app of apps) {\r\n            interviews += app.interviews;\r\n            offers += app.offer;\r\n            rejections += (app.rejection && !app.offer);\r\n        }\r\n        return { interviews, offers, rejections };\r\n    }\r\n\r\n    return (\r\n        <ApplicationContext.Consumer>\r\n            {({apps}) => {\r\n                const { interviews, offers, rejections } = pullStats(apps);\r\n                return (\r\n                    <div className=\"app-stats\">\r\n                        <div className=\"stats-container\">\r\n                            <h1>Application Statistics</h1>\r\n                            <ul className=\"stats-list\">\r\n                                <li className=\"total-apps\">\r\n                                    <h3>Applications</h3>\r\n                                    <p>{apps.length}</p>\r\n                                </li>\r\n                                <li className=\"offers\">\r\n                                    <h3>Offers</h3>\r\n                                    <p>{offers}</p>\r\n                                </li>\r\n                                <li className=\"interviews\">\r\n                                    <h3>Interviews</h3>\r\n                                    <p>{interviews}</p>\r\n                                </li>\r\n                                <li className=\"rejections\">\r\n                                    <h3>Rejections</h3>\r\n                                    <p>{rejections}</p>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }}\r\n        </ApplicationContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default ApplicationStats;","import AddApplication from './AddApplication';\r\nimport './ApplicationManager.css'\r\nimport ApplicationStats from './ApplicationStats';\r\n\r\n/**\r\n * @file ApplicationManager.js\r\n * @author Devin Arena\r\n * @description Parent widget for application management widgets\r\n * @since 8/27/2021\r\n */\r\n\r\n/**\r\n * Builds the ApplicationManager widget containing\r\n * widgets for application management\r\n * \r\n * @returns JSX for a ApplicationManager\r\n */\r\nconst ApplicationManager = () => {\r\n\r\n    return (\r\n        <div className=\"app-manager\">\r\n            <AddApplication />\r\n            <ApplicationStats />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ApplicationManager;","\r\nimport AppsContext from '../../ApplicationContext';\r\nimport './ApplicationCard.css'\r\n\r\n/**\r\n * @file ApplicationCard.js\r\n * @author Devin Arena\r\n * @description An application info card to be displayed on the ApplicationView panel\r\n * @since 8/28/2021\r\n */\r\n\r\nconst ApplicationCard = (props) => {\r\n\r\n    /**\r\n     * Determines the status of the application based on 'offer' and 'rejection' booleans.\r\n     * \r\n     * @returns a String containing Offer, Rejection, or Waiting based on application status\r\n     */\r\n    let status = () => {\r\n        if (props.app.offer)\r\n            return \"Offer\";\r\n        else if (props.app.rejection)\r\n            return \"Rejection\";\r\n        else\r\n            return \"Waiting...\"\r\n    }\r\n\r\n    return (\r\n        <AppsContext.Consumer>\r\n            {({ removeApp, updateApp, showPopup, showDialog }) => {\r\n                return (\r\n                    <div className={\r\n                        \"app-card\" +\r\n                        (props.app.offer ? \" job-offer\" : \"\") +\r\n                        (props.app.rejection && !props.app.offer ? \" rejection\" : \"\") +\r\n                        (props.app.interviews > 0 && !props.app.offer && !props.app.rejection ? \" interview-glow\" : \"\")\r\n                    }>\r\n                        <div className=\"app-information\">\r\n                            <button type=\"submit\" onClick={() => { showPopup(props.app) }}>{props.app.company}</button>\r\n                            <p>{props.app.date}</p>\r\n                            <p>Interviews: {props.app.interviews}</p>\r\n                            <p className=\"app-status\">{status()}</p>\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <button type=\"submit\" onClick={() => {\r\n                                showDialog(\"Congratulations on the offer at \" + props.app.company + \"!\")\r\n                                updateApp(props.app.id, { offer: !props.app.offer });\r\n                            }}>✉️</button>\r\n                            <button type=\"submit\" onClick={() => {\r\n                                updateApp(props.app.id, { interviews: props.app.interviews + 1 });\r\n                            }}>👔</button>\r\n                            <button type=\"submit\" onClick={() => {\r\n                                updateApp(props.app.id, { rejection: !props.app.rejection });\r\n                            }}>❌</button>\r\n                            <button type=\"submit\" onClick={() => {\r\n                                removeApp(props.app);\r\n                                showDialog(\"Removed application for \" + props.app.company);\r\n                            }}>🗑️</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }}\r\n        </AppsContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default ApplicationCard;","import './ApplicationView.css'\r\nimport ApplicationCard from './ApplicationCard'\r\nimport AppsContext from '../../ApplicationContext'\r\n\r\n/**\r\n * @file ApplicationViewer.js\r\n * @author Devin Arena\r\n * @description Builds a list of all applications as card items\r\n * @since 8/27/2021\r\n */\r\n\r\n/**\r\n * Builds the ApplicationManager widget containing\r\n * widgets for application management\r\n * \r\n * @returns JSX for a ApplicationManager\r\n */\r\nconst ApplicationView = () => {\r\n    return (\r\n        <div className=\"app-view\">\r\n            <AppsContext.Consumer>\r\n                {({ apps }) => {\r\n                    return [apps.map((app, id) => { return (<ApplicationCard key={id} app={app} />); })]\r\n                }}\r\n            </AppsContext.Consumer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ApplicationView;","\r\nimport React, { useEffect, useState } from \"react\";\r\nimport AppsContext from \"../../ApplicationContext\";\r\nimport './ApplicationPopup.css'\r\n\r\n/**\r\n * @file ApplicationPopup.js\r\n * @author Devin Arena\r\n * @description Builds a list of all applications as card items\r\n * @since 8/27/2021\r\n */\r\n\r\nconst ApplicationPopup = (props) => {\r\n\r\n    const [company, setCompany] = useState(\"\");\r\n    const [notes, setNotes] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [interviews, setInterviews] = useState(0);\r\n    const [closing, setClosing] = useState(false);\r\n\r\n    const popup = React.createRef();\r\n\r\n    const appsContext = React.useContext(AppsContext);\r\n\r\n    /**\r\n     * Called when the transition ends, if the application\r\n     * should be cleared (the popup faded out) update it to null.\r\n     * \r\n     * @param {Event} e to check target\r\n     */\r\n    const tryClose = (e) => {\r\n        if (e.target.className === \"app-popup\" && closing) {\r\n            props.close();\r\n            setClosing(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When the form is submitted, update the application.\r\n     * \r\n     * @param {Event} e the event to prevent\r\n     */\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const dates = date.split(\"-\");\r\n        const formatDate = (dates[1] > \"09\" ? dates[1] : dates[1].charAt(1)) + \"/\" + (dates[2] > \"09\" ? dates[2] : dates[2].charAt(1)) + \"/\" + dates[0];\r\n\r\n        appsContext.updateApp(props.application.id, { company: company, notes: notes, date: formatDate, interviews: interviews });\r\n        appsContext.showDialog(\"Successfully updated application for \" + company);\r\n        popup.current.style.opacity = 0;\r\n        setClosing(true);\r\n    }\r\n\r\n    /**\r\n     * Updates when the application updates. If this is not faded in\r\n     * and a new application is set, fade in and update field values.\r\n     */\r\n    useEffect(() => {\r\n        if (props.application != null && popup.current.style.opacity !== \"1\" && !closing) {\r\n            popup.current.style.opacity = 1;\r\n            setCompany(props.application.company);\r\n            setNotes(props.application.notes);\r\n            setInterviews(props.application.interviews);\r\n            // date must be formatted differently\r\n            const dates = props.application.date.split(\"/\");\r\n            setDate(dates[2] + \"-\" + dates[0].padStart(2, \"0\") + \"-\" + dates[1].padStart(2, \"0\"));\r\n        }\r\n    }, [props.application, popup, closing]);\r\n\r\n    if (props.application == null)\r\n        return (null);\r\n\r\n    return (\r\n        <div ref={popup} className=\"app-popup\" onTransitionEnd={tryClose}>\r\n            {\r\n                props.application != null ? (\r\n                    <div className=\"popup\">\r\n                        <form onSubmit={handleSubmit}>\r\n                            <label>Company: </label>\r\n                            <input type=\"text\" name=\"company\" maxLength=\"80\" value={company} onChange={(e) => setCompany(e.target.value)} />\r\n                            <label>Notes: </label>\r\n                            <textarea name=\"notes\" rows=\"5\" maxLength=\"2000\" value={notes} onChange={e => setNotes(e.target.value)} />\r\n                            <label>Date: </label>\r\n                            <input type=\"date\" name=\"date\" maxLength=\"80\" value={date} onChange={(e) => setDate(e.target.value)} />\r\n                            <label>Interviews: </label>\r\n                            <input type=\"number\" name=\"interviews\" maxLength=\"80\" value={interviews} onChange={(e) => setInterviews(parseInt(e.target.value))} />\r\n                            <div className=\"popup-buttons\">\r\n                                <button type=\"button\" onClick={() => {\r\n                                    popup.current.style.opacity = 0;\r\n                                    setClosing(true);\r\n                                }}>Close</button>\r\n                                <input type=\"submit\" name=\"save\" value=\"Save\" />\r\n                            </div>\r\n                        </form>\r\n                    </div>) : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ApplicationPopup;","import './DialogBox.css'\r\nimport AppsContext from '../ApplicationContext';\r\nimport React, { useEffect, useState, useContext } from 'react';\r\n\r\n/**\r\n * @file DialogBox.js\r\n * @author Devin Arena\r\n * @description Simple widget to display text at the bottom\r\n *              of the screen for a short time.\r\n * @since 9/11/2021\r\n */\r\n\r\nconst DialogBox = (props) => {\r\n\r\n    const [hidden, setHidden] = useState(true);\r\n    const [reset, setReset] = useState(false);\r\n    const [oldText, setOldText] = useState(\"\");\r\n    \r\n    const appsContext = useContext(AppsContext);\r\n\r\n    const timer = React.useRef();\r\n\r\n    /**\r\n     * When the dialog fades out, remove the text (so it doesn't open again)\r\n     * and clear the reset flag so the dialog can be opened again.\r\n     * \r\n     * @param {Event} e the event to handle\r\n     */\r\n    const fadedOut = (e) => {\r\n        if (e.propertyName === \"opacity\" && hidden && reset) {\r\n            appsContext.showDialog(\"\");\r\n            setReset(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When text changes, open the dialog and close it four seconds later.\r\n     * Reset flagged used to allow for animations.\r\n     */\r\n    useEffect(() => {\r\n        const textChange = (props.text !== \"\") && !(props.text === oldText);\r\n        if (reset && !textChange) {\r\n            return;\r\n        }\r\n        if (hidden && props.text.length > 0) {\r\n            setHidden(false);\r\n            if (textChange)\r\n                clearTimeout(timer.current);\r\n            setOldText(props.text);\r\n            timer.current = setTimeout(() => {\r\n                setReset(true);\r\n                setHidden(true);\r\n            }, 2500);\r\n        }\r\n    }, [props.text, hidden, reset, oldText, appsContext]);\r\n\r\n    /**\r\n     * Clear timeouts on unmount;\r\n     */\r\n    useEffect(() => {\r\n        return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    return (\r\n        <div className={\"dialog-box\" + (hidden ? \" hidden\" : \"\")} onTransitionEnd={e => fadedOut(e)}>\r\n            <p>{props.text}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogBox;","import './AppTracker.css';\r\nimport Application from './Application';\r\nimport Navbar from './components/Navbar'\r\nimport ApplicationManager from './components/application-manage/ApplicationManager'\r\nimport ApplicationView from './components/application-view/ApplicationView';\r\nimport AppsContext from './ApplicationContext';\r\nimport ApplicationPopup from './components/application-view/ApplicationPopup';\r\nimport React, { useState, useEffect } from 'react';\r\nimport DialogBox from './components/DialogBox';\r\n\r\n/**\r\n * @file AppTracker.js\r\n * @author Devin Arena\r\n * @description Parent widget containing ApplicationManager and\r\n *              ApplicationViewer, also stores some global state.\r\n * @since 8/27/2021\r\n */\r\n\r\n/**\r\n * Builds the main app with a provider for ApplicationContext,\r\n * an ApplicationManager and Application view, and helper methods\r\n * for application management.\r\n * \r\n * @returns JSX for App\r\n */\r\nconst AppTracker = () => {\r\n\r\n  const [theme, setTheme] = useState(\"dark\");\r\n  const [apps, setApps] = useState([]);\r\n  const [createdApps, setCreatedApps] = useState(0);\r\n  const [popupApplication, setPopupApplication] = useState(null);\r\n  const [dialogText, setDialogText] = useState(\"\");\r\n\r\n  /**\r\n   * Removes an application from stored applications\r\n   * \r\n   * @param {Application} application to be removed\r\n   */\r\n  const removeApp = (application) => {\r\n    setApps(apps.filter(app => app !== application));\r\n  }\r\n\r\n  /**\r\n   * Adds an application to stored applications and increments\r\n   * total created applications (for application id)\r\n   * \r\n   * @param {Application} application to be added \r\n   */\r\n  const addApp = (application) => {\r\n    setApps(apps.concat([application]));\r\n    setCreatedApps(createdApps + 1);\r\n  }\r\n\r\n  /**\r\n   * Updates an application by creating a new array\r\n   * and readding all apps except the one corresponding\r\n   * to the new application id.\r\n   * \r\n   * @param {Application} application to be updated \r\n   */\r\n  const updateApp = (id, values) => {\r\n    setApps(apps.map(app => {\r\n      if (app.id === id) {\r\n        return new Application(\r\n          id,\r\n          values.company != null ? values.company : app.company,\r\n          values.notes != null ? values.notes : app.notes,\r\n          values.date != null ? values.date : app.date,\r\n          values.interviews != null ? values.interviews : app.interviews,\r\n          values.offer != null ? values.offer : app.offer,\r\n          values.rejection != null ? values.rejection : app.rejection,\r\n        );\r\n      }\r\n      return app;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Shows a popup for the application which allows the user\r\n   * to edit application data.\r\n   * \r\n   * @param {Application} application \r\n   */\r\n  const showPopup = (application) => {\r\n    setPopupApplication(application);\r\n  }\r\n\r\n  /**\r\n   * Loads application and theme data from a JSON object.\r\n   * \r\n   * @param {JSON} json to load from\r\n   */\r\n  const loadFromJSON = (json) => {\r\n    setTheme(json.theme);\r\n    const numApps = Math.max(json.createdApps, createdApps);\r\n    setApps(apps.concat(json.apps.map((app, i) => {\r\n      return new Application(createdApps + i, app.company, app.notes, app.date, app.interviews, app.offer, app.rejection);\r\n    })));\r\n    setCreatedApps(numApps + json.apps.length);\r\n    showDialog(\"Successfully imported \" + json.apps.length + \" applications!\");\r\n  }\r\n\r\n  /**\r\n   * Shows a dialog box at the bottom of the screen for a few seconds.\r\n   * \r\n   * @param {String} text the text to display\r\n   */\r\n  const showDialog = (text) => {\r\n    setDialogText(text);\r\n  }\r\n\r\n  /**\r\n   * Hook for when the web application initializes, loads\r\n   * application and user data from local storage.\r\n   */\r\n  useEffect(() => {\r\n    const apps = localStorage.getItem(\"applications\");\r\n    if (apps != null)\r\n      setApps(JSON.parse(apps));\r\n    const createdApps = localStorage.getItem(\"createdApps\");\r\n    if (createdApps != null)\r\n      setCreatedApps(parseInt(createdApps));\r\n    const theme = localStorage.getItem(\"theme\");\r\n    if (theme != null) {\r\n      setTheme(theme);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Hook for when apps or created apps changes, save\r\n   * any of those changes to localstorage to persist data.\r\n   */\r\n  useEffect(() => {\r\n    localStorage.setItem(\"applications\", JSON.stringify(apps));\r\n    if (createdApps > 0)\r\n      localStorage.setItem(\"createdApps\", createdApps);\r\n  }, [apps, createdApps]);\r\n\r\n  /**\r\n   * Hook when the theme changes, updates the css variables\r\n   * to change colors of all elements.\r\n   */\r\n  useEffect(() => {\r\n    localStorage.setItem(\"theme\", theme);\r\n\r\n    document.documentElement.style.setProperty(\"--animated\", \"all\");\r\n    if (theme === \"light\") {\r\n      document.documentElement.style.setProperty(\"--root-background\", \"#eee\");\r\n      document.documentElement.style.setProperty(\"--text-color\", \"#000\");\r\n      document.documentElement.style.setProperty(\"--panel-gray\", \"#bbb\");\r\n      document.documentElement.style.setProperty(\"--panel-border\", \"#777\");\r\n      document.documentElement.style.setProperty(\"--dropdown-gray\", \"#959595\");\r\n      document.documentElement.style.setProperty(\"--dropdown-hover\", \"#858585\");\r\n      document.documentElement.style.setProperty(\"--form-background\", \"#ddd\");\r\n      document.documentElement.style.setProperty(\"--form-focus\", \"#fff\");\r\n      document.documentElement.style.setProperty(\"--form-border\", \"#aaa\");\r\n      document.documentElement.style.setProperty(\"--card-color\", \"#bbb\");\r\n    } else {\r\n      document.documentElement.style.setProperty(\"--root-background\", \"#555\");\r\n      document.documentElement.style.setProperty(\"--text-color\", \"#fff\");\r\n      document.documentElement.style.setProperty(\"--panel-gray\", \"#464646\");\r\n      document.documentElement.style.setProperty(\"--panel-border\", \"#232323\");\r\n      document.documentElement.style.setProperty(\"--dropdown-gray\", \"#353535\");\r\n      document.documentElement.style.setProperty(\"--dropdown-hover\", \"#252525\");\r\n      document.documentElement.style.setProperty(\"--form-background\", \"#333\");\r\n      document.documentElement.style.setProperty(\"--form-focus\", \"#666\");\r\n      document.documentElement.style.setProperty(\"--form-border\", \"#000\");\r\n      document.documentElement.style.setProperty(\"--card-color\", \"#777\");\r\n    }\r\n\r\n    setTimeout(() => {\r\n      document.documentElement.style.setProperty(\"--animated\", \"none\");\r\n    }, 1000);\r\n  }, [theme]);\r\n\r\n  return (\r\n    <div className=\"AppTracker\">\r\n      <AppsContext.Provider value={{ theme, apps, removeApp, addApp, updateApp, createdApps, showPopup, showDialog }}>\r\n        <Navbar loadFromJSON={loadFromJSON} theme={theme} switchTheme={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")} />\r\n        <div className=\"content\">\r\n          <ApplicationManager />\r\n          <ApplicationView />\r\n          <ApplicationPopup application={popupApplication} close={() => setPopupApplication(null)} />\r\n          <DialogBox text={dialogText} />\r\n        </div>\r\n      </AppsContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppTracker;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppTracker from './AppTracker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppTracker />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}